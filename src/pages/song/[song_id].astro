---
import PlayerLayout from "../../layouts/PlayerLayout.astro";
import { Sidebar } from "../../components/Sidebar";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import type {
  ArtistData,
  SongData,
  VideoData,
  VideoTimestamp,
} from "../../lib/types";

// Set to true for static site generation (required for GitHub Pages)
export const prerender = true;

// Define all possible paths for static generation
export async function getStaticPaths() {
  // Import JSON files directly
  const artistsJson = await import("../../../public/artists.json");
  const songsJson = await import("../../../public/songs.json");

  // Get all songs
  const songs = songsJson.songs;

  // Return a path for each song
  return songs.map((song) => ({
    params: { song_id: song.song_id },
    props: { songData: song },
  }));
}

// Get the song ID and data from the params and props
const { song_id } = Astro.params;
const { songData } = Astro.props;

// Import JSON files
const artistsJson = await import("../../../public/artists.json");
const songsJson = await import("../../../public/songs.json");

// Dynamically import all video JSON files
const videoModules = import.meta.glob("../../../public/videos/*.json", {
  eager: true,
});
const videos = Object.values(videoModules) as VideoData[];

// Process data
const artists = artistsJson.artists as ArtistData[];
const songs = songsJson.songs as SongData[];

// Calculate song play counts
const playCounts: Record<string, number> = {};
videos.forEach((video) => {
  video.timestamps.forEach((timestamp) => {
    const songId = timestamp.song_id;
    playCounts[songId] = (playCounts[songId] || 0) + 1;
  });
});

// Enrich song data with artist names and play counts
const enrichedSongs = songs.map((song) => {
  // Handle multiple artist IDs
  const artistNames = song.artist_ids
    .map((id) => {
      const artist = artists.find((a) => a.artist_id === id);
      return artist ? artist.name : "";
    })
    .filter(Boolean); // Remove empty strings

  return {
    ...song,
    artist_names: artistNames,
    artist_name: artistNames.join(", ") || "-",
    count: playCounts[song.song_id] || 0,
  };
});

// Create artists map for the sidebar
const artistsMap: Record<string, string> = {};
artists.forEach((artist) => {
  artistsMap[artist.artist_id] = artist.name;
});

// Get the current song
const song = songs.find((s) => s.song_id === song_id);
const artistNames = song
  ? song.artist_ids
      .map((id) => {
        const artist = artists.find((a) => a.artist_id === id);
        return artist ? artist.name : "";
      })
      .filter(Boolean)
  : [];
const artistName = artistNames.length > 0 ? artistNames.join(", ") : "-";

// Get videos containing this song
const songVideos: Array<VideoData & { timestamp: VideoTimestamp }> = [];
if (song) {
  videos.forEach((video) => {
    video.timestamps.forEach((timestamp) => {
      if (timestamp.song_id === song.song_id) {
        songVideos.push({
          ...video,
          timestamp,
        });
      }
    });
  });

  // Sort videos by start datetime (newest first)
  songVideos.sort(
    (a, b) =>
      new Date(b.start_datetime).getTime() -
      new Date(a.start_datetime).getTime()
  );
}
---

<PlayerLayout title="Song Detail">
  <Sidebar
    slot="sidebar"
    videos={videos}
    songs={enrichedSongs}
    artists={artistsMap}
    defaultTab="songs"
    client:load
  />
  <div class="space-y-4">
    <h1 class="text-2xl font-bold">{song?.title || "Song Detail"}</h1>
    <p class="text-muted-foreground">{artistName}</p>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {
        songVideos.map((videoData) => (
          <a
            href={`${import.meta.env.BASE_URL}/video/${videoData.video_id}?t=${videoData.timestamp.time}`}
            class="block cursor-pointer"
          >
            <Card className="overflow-hidden transition-colors hover:bg-muted/50">
              <div class="aspect-video w-full overflow-hidden">
                <img
                  src={videoData.thumbnail_url}
                  alt={videoData.title}
                  class="h-full w-full object-cover"
                  loading="lazy"
                />
              </div>
              <CardContent className="p-3">
                <h3 class="line-clamp-2 text-sm font-medium">
                  {videoData.title}
                </h3>
                <p class="text-xs text-muted-foreground">
                  {new Date(videoData.start_datetime).toLocaleDateString(
                    "ja-JP"
                  )}
                </p>
                <p class="text-xs text-muted-foreground mt-1">
                  Timestamp: {videoData.timestamp.original_time}
                </p>
              </CardContent>
            </Card>
          </a>
        ))
      }
      {
        songVideos.length === 0 && (
          <div class="col-span-full text-center py-8">
            <p>No videos found for this song</p>
          </div>
        )
      }
    </div>
  </div>
</PlayerLayout>
